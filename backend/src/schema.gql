# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CommentType {
  createdAt: String!
  id: Int!
  post: PostType!
  text: String!
  updatedAt: String!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ErrorType {
  code: String
  message: String!
}

input GetUsersDto {
  search: String
  skip: Float
  take: Float
}

type LikeType {
  id: Int!
  postId: Int!
  userId: Int!
}

input LoginDto {
  email: String!
  password: String!
}

type LoginResponse {
  error: ErrorType
  user: User
}

type Mutation {
  createComment(postId: Int!, text: String!): CommentType!
  createPost(tags: String, text: String!, video: Upload!): PostType!
  deleteComment(id: Int!): String
  deletePost(id: Int!): String!
  likePost(postId: Int!): LikeType!
  login(loginInput: LoginDto!): LoginResponse!
  logout: String!
  refreshToken: RefreshType!
  register(registerInput: RegisterDto!): RegisterResponse!
  toggleUserFollow(userToFollowId: Int!): ToggleFollowType!
  unlikePost(postId: Int!): LikeType!
  updateUser(bio: String, fullname: String, image: Upload): User!
}

type PostDetails {
  createdAt: DateTime!
  id: Int!
  likes: [LikeType!]
  otherPostIds: [Int!]
  tags: [String!]!
  text: String!
  user: User!
  video: String!
}

type PostType {
  createdAt: DateTime!
  id: Int!
  likes: [LikeType!]
  tags: [String!]!
  text: String!
  user: User!
  video: String!
}

type Query {
  getCommentsByPostId(postId: Int!): [CommentType!]!
  getPostById(id: Int!): PostDetails!
  getPosts(skip: Int! = 0, take: Int! = 1): [PostType!]!
  getPostsByUserId(userId: Int!): [PostType!]!
  getUsers(getUsersInput: GetUsersDto): [User!]!
}

type RefreshType {
  accessToken: String!
  user: User!
}

input RegisterDto {
  confirmPassword: String!
  email: String!
  fullname: String!
  password: String!
}

type RegisterResponse {
  error: ErrorType
  user: User
}

type ToggleFollowType {
  isFollowed: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  bio: String
  canFollow: Boolean
  email: String!
  fullname: String!
  id: Int!
  image: String
  isFollowed: Boolean
}